/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * DuplicateMember: 'Found multiple members with the same pubkey'
 *
 * @category Errors
 * @category generated
 */
export class DuplicateMemberError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'DuplicateMember'
  constructor() {
    super('Found multiple members with the same pubkey')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DuplicateMemberError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new DuplicateMemberError())
createErrorFromNameLookup.set(
  'DuplicateMember',
  () => new DuplicateMemberError()
)

/**
 * EmptyMembers: 'Members array is empty'
 *
 * @category Errors
 * @category generated
 */
export class EmptyMembersError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'EmptyMembers'
  constructor() {
    super('Members array is empty')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, EmptyMembersError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new EmptyMembersError())
createErrorFromNameLookup.set('EmptyMembers', () => new EmptyMembersError())

/**
 * TooManyMembers: 'Too many members, can be up to 65535'
 *
 * @category Errors
 * @category generated
 */
export class TooManyMembersError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'TooManyMembers'
  constructor() {
    super('Too many members, can be up to 65535')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, TooManyMembersError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new TooManyMembersError())
createErrorFromNameLookup.set('TooManyMembers', () => new TooManyMembersError())

/**
 * InvalidThreshold: 'Invalid threshold, must be between 1 and number of members'
 *
 * @category Errors
 * @category generated
 */
export class InvalidThresholdError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidThreshold'
  constructor() {
    super('Invalid threshold, must be between 1 and number of members')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidThresholdError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new InvalidThresholdError())
createErrorFromNameLookup.set(
  'InvalidThreshold',
  () => new InvalidThresholdError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
