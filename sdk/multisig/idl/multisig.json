{
  "version": "0.1.0",
  "name": "multisig",
  "instructions": [
    {
      "name": "multisigCreate",
      "docs": [
        "Create a multisig."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "createKey",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "An ephemeral signer that is used as a seed for the Multisig PDA.",
            "Must be a signer to prevent the Multisig account from re-initialization by someone else but the original creator."
          ]
        },
        {
          "name": "creator",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The creator of the multisig."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "MultisigCreateArgs"
          }
        }
      ]
    },
    {
      "name": "multisigAddMember",
      "docs": [
        "Add a new member to the multisig."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "configAuthority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "Multisig `config_authority` that must authorize the configuration change."
          ]
        },
        {
          "name": "rentPayer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The account that will be charged in case the multisig account needs to reallocate space,",
            "for example when adding a new member.",
            "This is usually the same as `config_authority`, but can be a different account if needed."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "We might need it in case reallocation is needed."
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "MultisigAddMemberArgs"
          }
        }
      ]
    },
    {
      "name": "multisigRemoveMember",
      "docs": [
        "Remove a member/key from the multisig."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "configAuthority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "Multisig `config_authority` that must authorize the configuration change."
          ]
        },
        {
          "name": "rentPayer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The account that will be charged in case the multisig account needs to reallocate space,",
            "for example when adding a new member.",
            "This is usually the same as `config_authority`, but can be a different account if needed."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "We might need it in case reallocation is needed."
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "MultisigRemoveMemberArgs"
          }
        }
      ]
    },
    {
      "name": "configTransactionCreate",
      "docs": [
        "Create a new config transaction."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "transaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "creator",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "ConfigTransactionCreateArgs"
          }
        }
      ]
    },
    {
      "name": "configTransactionExecute",
      "docs": [
        "Execute a config transaction.",
        "The transaction must be `Approved`."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The multisig account that owns the transaction."
          ]
        },
        {
          "name": "member",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "One of the multisig members with `Execute` permission."
          ]
        },
        {
          "name": "proposal",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The proposal account associated with the transaction."
          ]
        },
        {
          "name": "transaction",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The transaction to execute."
          ]
        },
        {
          "name": "rentPayer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The account that will be charged in case the multisig account needs to reallocate space,",
            "for example when adding a new member.",
            "This is usually the same as `member`, but can be a different account if needed."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "We might need it in case reallocation is needed."
          ]
        }
      ],
      "args": []
    },
    {
      "name": "vaultTransactionCreate",
      "docs": [
        "Create a new vault transaction."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "transaction",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "creator",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "VaultTransactionCreateArgs"
          }
        }
      ]
    },
    {
      "name": "vaultTransactionExecute",
      "docs": [
        "Execute a vault transaction.",
        "The transaction must be `Approved`."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "proposal",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The proposal account associated with the transaction."
          ]
        },
        {
          "name": "transaction",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The transaction to execute."
          ]
        },
        {
          "name": "member",
          "isMut": true,
          "isSigner": true
        }
      ],
      "args": []
    },
    {
      "name": "proposalCreate",
      "docs": [
        "Create a new multisig proposal."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "proposal",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "rentPayer",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "ProposalCreateArgs"
          }
        }
      ]
    },
    {
      "name": "proposalApprove",
      "docs": [
        "Approve a multisig proposal on behalf of the `member`.",
        "The proposal must be `Active`."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "proposal",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "member",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "ProposalVoteArgs"
          }
        }
      ]
    },
    {
      "name": "proposalReject",
      "docs": [
        "Reject a multisig proposal on behalf of the `member`.",
        "The proposal must be `Active`."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "proposal",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "member",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "ProposalVoteArgs"
          }
        }
      ]
    },
    {
      "name": "proposalCancel",
      "docs": [
        "Cancel a multisig proposal on behalf of the `member`.",
        "The proposal must be `Approved`."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "proposal",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "member",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "ProposalVoteArgs"
          }
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "ConfigTransaction",
      "docs": [
        "Stores data required for execution of a multisig configuration transaction.",
        "Config transaction can perform a predefined set of actions on the Multisig PDA, such as adding/removing members,",
        "changing the threshold, etc."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "multisig",
            "docs": [
              "The multisig this belongs to."
            ],
            "type": "publicKey"
          },
          {
            "name": "creator",
            "docs": [
              "Member of the Multisig who submitted the transaction."
            ],
            "type": "publicKey"
          },
          {
            "name": "index",
            "docs": [
              "Index of this transaction within the multisig."
            ],
            "type": "u64"
          },
          {
            "name": "bump",
            "docs": [
              "bump for the transaction seeds."
            ],
            "type": "u8"
          },
          {
            "name": "actions",
            "docs": [
              "Action to be performed on the multisig."
            ],
            "type": {
              "vec": {
                "defined": "ConfigAction"
              }
            }
          }
        ]
      }
    },
    {
      "name": "Multisig",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "createKey",
            "docs": [
              "Key that is used to seed the multisig PDA."
            ],
            "type": "publicKey"
          },
          {
            "name": "configAuthority",
            "docs": [
              "The authority that can change the multisig config.",
              "This is a very important parameter as this authority can change the members and threshold.",
              "",
              "The convention is to set this to `Pubkey::default()`.",
              "In this case, the multisig becomes autonomous, so every config change goes through",
              "the normal process of voting by the members.",
              "",
              "However, if this parameter is set to any other key, all the config changes for this multisig",
              "will need to be signed by the `config_authority`. We call such a multisig a \"controlled multisig\"."
            ],
            "type": "publicKey"
          },
          {
            "name": "threshold",
            "docs": [
              "Threshold for signatures."
            ],
            "type": "u16"
          },
          {
            "name": "timeLock",
            "docs": [
              "How many seconds must pass between transaction voting settlement and execution."
            ],
            "type": "i32"
          },
          {
            "name": "transactionIndex",
            "docs": [
              "Last transaction index. 0 means no transactions have been created."
            ],
            "type": "u64"
          },
          {
            "name": "staleTransactionIndex",
            "docs": [
              "Last stale transaction index. All transactions up until this index are stale.",
              "This index is updated when multisig config (members/threshold) changes."
            ],
            "type": "u64"
          },
          {
            "name": "vaultIndex",
            "docs": [
              "Index to track the last created vault for this multisig."
            ],
            "type": "u8"
          },
          {
            "name": "bump",
            "docs": [
              "Bump for the multisig PDA seed."
            ],
            "type": "u8"
          },
          {
            "name": "members",
            "docs": [
              "Members of the multisig."
            ],
            "type": {
              "vec": {
                "defined": "Member"
              }
            }
          }
        ]
      }
    },
    {
      "name": "Proposal",
      "docs": [
        "Stores the data required for tracking the status of a multisig proposal.",
        "Each `Proposal` has a 1:1 association with a transaction account, e.g. a `VaultTransaction` or a `ConfigTransaction`;",
        "the latter can be executed only after the `Proposal` has been approved and its time lock is released."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "multisig",
            "docs": [
              "The multisig this belongs to."
            ],
            "type": "publicKey"
          },
          {
            "name": "transactionIndex",
            "docs": [
              "Index of the multisig transaction this proposal is associated with."
            ],
            "type": "u64"
          },
          {
            "name": "status",
            "docs": [
              "The status of the transaction."
            ],
            "type": {
              "defined": "ProposalStatus"
            }
          },
          {
            "name": "bump",
            "docs": [
              "PDA bump."
            ],
            "type": "u8"
          },
          {
            "name": "approved",
            "docs": [
              "Keys that have approved/signed."
            ],
            "type": {
              "vec": "publicKey"
            }
          },
          {
            "name": "rejected",
            "docs": [
              "Keys that have rejected."
            ],
            "type": {
              "vec": "publicKey"
            }
          },
          {
            "name": "cancelled",
            "docs": [
              "Keys that have cancelled (Approved only)."
            ],
            "type": {
              "vec": "publicKey"
            }
          }
        ]
      }
    },
    {
      "name": "VaultTransaction",
      "docs": [
        "Stores data required for tracking the voting and execution status of a vault transaction.",
        "Vault transaction is a transaction that's executed on behalf of the multisig vault PDA",
        "and wraps arbitrary Solana instructions, typically calling into other Solana programs."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "multisig",
            "docs": [
              "The multisig this belongs to."
            ],
            "type": "publicKey"
          },
          {
            "name": "creator",
            "docs": [
              "Member of the Multisig who submitted the transaction."
            ],
            "type": "publicKey"
          },
          {
            "name": "index",
            "docs": [
              "Index of this transaction within the multisig."
            ],
            "type": "u64"
          },
          {
            "name": "bump",
            "docs": [
              "bump for the transaction seeds."
            ],
            "type": "u8"
          },
          {
            "name": "vaultIndex",
            "docs": [
              "Index of the vault this transaction belongs to."
            ],
            "type": "u8"
          },
          {
            "name": "vaultBump",
            "docs": [
              "Derivation bump of the vault PDA this transaction belongs to."
            ],
            "type": "u8"
          },
          {
            "name": "ephemeralSignerBumps",
            "docs": [
              "Derivation bumps for additional signers.",
              "Some transactions require multiple signers. Often these additional signers are \"ephemeral\" keypairs",
              "that are generated on the client with a sole purpose of signing the transaction and be discarded immediately after.",
              "When wrapping such transactions into multisig ones, we replace these \"ephemeral\" signing keypairs",
              "with PDAs derived from the MultisigTransaction's `transaction_index` and controlled by the Multisig Program;",
              "during execution the program includes the seeds of these PDAs into the `invoke_signed` calls,",
              "thus \"signing\" on behalf of these PDAs."
            ],
            "type": "bytes"
          },
          {
            "name": "message",
            "docs": [
              "data required for executing the transaction."
            ],
            "type": {
              "defined": "VaultTransactionMessage"
            }
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "ConfigTransactionCreateArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "actions",
            "type": {
              "vec": {
                "defined": "ConfigAction"
              }
            }
          },
          {
            "name": "memo",
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "MultisigAddMemberArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "newMember",
            "type": {
              "defined": "Member"
            }
          },
          {
            "name": "memo",
            "docs": [
              "Memo isn't used for anything, but is included in `AddMemberEvent` that can later be parsed and indexed."
            ],
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "MultisigRemoveMemberArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "oldMember",
            "type": "publicKey"
          },
          {
            "name": "memo",
            "docs": [
              "Memo isn't used for anything, but is included in `RemoveMemberEvent` that can later be parsed and indexed."
            ],
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "MultisigChangeThresholdArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "newThreshold",
            "type": "u16"
          },
          {
            "name": "memo",
            "docs": [
              "Memo isn't used for anything, but is included in `ChangeThreshold` that can later be parsed and indexed."
            ],
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "MultisigCreateArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "configAuthority",
            "docs": [
              "The authority that can configure the multisig: add/remove members, change the threshold, etc.",
              "Should be set to `None` for autonomous multisigs."
            ],
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "threshold",
            "docs": [
              "The number of signatures required to execute a transaction."
            ],
            "type": "u16"
          },
          {
            "name": "members",
            "docs": [
              "The members of the multisig."
            ],
            "type": {
              "vec": {
                "defined": "Member"
              }
            }
          },
          {
            "name": "timeLock",
            "docs": [
              "How many seconds must pass between transaction voting settlement and execution."
            ],
            "type": "i32"
          },
          {
            "name": "memo",
            "docs": [
              "Memo isn't used for anything, but is included in `CreatedEvent` that can later be parsed and indexed."
            ],
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "ProposalCreateArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "transactionIndex",
            "docs": [
              "Index of the multisig transaction this proposal is associated with."
            ],
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "ProposalVoteArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "memo",
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "VaultTransactionCreateArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "vaultIndex",
            "docs": [
              "Index of the vault this transaction belongs to."
            ],
            "type": "u8"
          },
          {
            "name": "ephemeralSigners",
            "docs": [
              "Number of ephemeral signing PDAs required by the transaction."
            ],
            "type": "u8"
          },
          {
            "name": "transactionMessage",
            "type": "bytes"
          },
          {
            "name": "memo",
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "VaultTransactionMessage",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "numSigners",
            "docs": [
              "The number of signer pubkeys in the account_keys vec."
            ],
            "type": "u8"
          },
          {
            "name": "numWritableSigners",
            "docs": [
              "The number of writable signer pubkeys in the account_keys vec."
            ],
            "type": "u8"
          },
          {
            "name": "numWritableNonSigners",
            "docs": [
              "The number of writable non-signer pubkeys in the account_keys vec."
            ],
            "type": "u8"
          },
          {
            "name": "accountKeys",
            "docs": [
              "Unique account pubkeys (including program IDs) required for execution of the tx.",
              "The signer pubkeys appear at the beginning of the vec, with writable pubkeys first, and read-only pubkeys following.",
              "The non-signer pubkeys follow with writable pubkeys first and read-only ones following.",
              "Program IDs are also stored at the end of the vec along with other non-signer non-writable pubkeys:",
              "",
              "```plaintext",
              "[pubkey1, pubkey2, pubkey3, pubkey4, pubkey5, pubkey6, pubkey7, pubkey8]",
              "|---writable---|  |---readonly---|  |---writable---|  |---readonly---|",
              "|------------signers-------------|  |----------non-singers-----------|",
              "```"
            ],
            "type": {
              "vec": "publicKey"
            }
          },
          {
            "name": "instructions",
            "docs": [
              "List of instructions making up the tx."
            ],
            "type": {
              "vec": {
                "defined": "MultisigCompiledInstruction"
              }
            }
          },
          {
            "name": "addressTableLookups",
            "docs": [
              "List of address table lookups used to load additional accounts",
              "for this transaction."
            ],
            "type": {
              "vec": {
                "defined": "MultisigMessageAddressTableLookup"
              }
            }
          }
        ]
      }
    },
    {
      "name": "MultisigCompiledInstruction",
      "docs": [
        "Concise serialization schema for instructions that make up a transaction.",
        "Closely mimics the Solana transaction wire format."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "programIdIndex",
            "type": "u8"
          },
          {
            "name": "accountIndexes",
            "docs": [
              "Indices into the tx's `account_keys` list indicating which accounts to pass to the instruction."
            ],
            "type": "bytes"
          },
          {
            "name": "data",
            "docs": [
              "Instruction data."
            ],
            "type": "bytes"
          }
        ]
      }
    },
    {
      "name": "MultisigMessageAddressTableLookup",
      "docs": [
        "Address table lookups describe an on-chain address lookup table to use",
        "for loading more readonly and writable accounts into a transaction."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "accountKey",
            "docs": [
              "Address lookup table account key."
            ],
            "type": "publicKey"
          },
          {
            "name": "writableIndexes",
            "docs": [
              "List of indexes used to load writable accounts."
            ],
            "type": "bytes"
          },
          {
            "name": "readonlyIndexes",
            "docs": [
              "List of indexes used to load readonly accounts."
            ],
            "type": "bytes"
          }
        ]
      }
    },
    {
      "name": "Member",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "key",
            "type": "publicKey"
          },
          {
            "name": "permissions",
            "type": {
              "defined": "Permissions"
            }
          }
        ]
      }
    },
    {
      "name": "Permissions",
      "docs": [
        "Bitmask for permissions."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "mask",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ConfigUpdateType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "AddMember",
            "fields": [
              {
                "name": "reallocated",
                "type": "bool"
              }
            ]
          },
          {
            "name": "RemoveMember"
          },
          {
            "name": "ChangeThreshold"
          },
          {
            "name": "ChangeConfigAuthority"
          },
          {
            "name": "ChangeAllowExternalExecute"
          }
        ]
      }
    },
    {
      "name": "Vote",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Approve"
          },
          {
            "name": "Reject"
          },
          {
            "name": "Cancel"
          }
        ]
      }
    },
    {
      "name": "ConfigAction",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "AddMember",
            "fields": [
              {
                "name": "new_member",
                "type": {
                  "defined": "Member"
                }
              }
            ]
          },
          {
            "name": "RemoveMember",
            "fields": [
              {
                "name": "old_member",
                "type": "publicKey"
              }
            ]
          },
          {
            "name": "ChangeThreshold",
            "fields": [
              {
                "name": "new_threshold",
                "type": "u16"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "ProposalStatus",
      "docs": [
        "The status of a proposal.",
        "Each variant wraps a timestamp of when the status was set."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Active",
            "fields": [
              {
                "name": "timestamp",
                "type": "i64"
              }
            ]
          },
          {
            "name": "Rejected",
            "fields": [
              {
                "name": "timestamp",
                "type": "i64"
              }
            ]
          },
          {
            "name": "Approved",
            "fields": [
              {
                "name": "timestamp",
                "type": "i64"
              }
            ]
          },
          {
            "name": "Executed",
            "fields": [
              {
                "name": "timestamp",
                "type": "i64"
              }
            ]
          },
          {
            "name": "Cancelled",
            "fields": [
              {
                "name": "timestamp",
                "type": "i64"
              }
            ]
          }
        ]
      }
    }
  ],
  "events": [
    {
      "name": "MultisigCreated",
      "fields": [
        {
          "name": "multisig",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "memo",
          "type": {
            "option": "string"
          },
          "index": true
        }
      ]
    },
    {
      "name": "MultisigConfigUpdated",
      "fields": [
        {
          "name": "multisig",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "update",
          "type": {
            "defined": "ConfigUpdateType"
          },
          "index": true
        },
        {
          "name": "memo",
          "type": {
            "option": "string"
          },
          "index": true
        }
      ]
    },
    {
      "name": "TransactionCreated",
      "fields": [
        {
          "name": "multisig",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "transaction",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "memo",
          "type": {
            "option": "string"
          },
          "index": true
        }
      ]
    },
    {
      "name": "TransactionExecuted",
      "fields": [
        {
          "name": "multisig",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "transaction",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "ProposalCreated",
      "fields": [
        {
          "name": "multisig",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "proposal",
          "type": "publicKey",
          "index": false
        }
      ]
    },
    {
      "name": "ProposalApproved",
      "fields": [
        {
          "name": "multisig",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "proposal",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "memo",
          "type": {
            "option": "string"
          },
          "index": true
        }
      ]
    },
    {
      "name": "ProposalRejected",
      "fields": [
        {
          "name": "multisig",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "proposal",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "memo",
          "type": {
            "option": "string"
          },
          "index": true
        }
      ]
    },
    {
      "name": "ProposalCancelled",
      "fields": [
        {
          "name": "multisig",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "proposal",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "memo",
          "type": {
            "option": "string"
          },
          "index": true
        }
      ]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "DuplicateMember",
      "msg": "Found multiple members with the same pubkey"
    },
    {
      "code": 6001,
      "name": "EmptyMembers",
      "msg": "Members array is empty"
    },
    {
      "code": 6002,
      "name": "TooManyMembers",
      "msg": "Too many members, can be up to 65535"
    },
    {
      "code": 6003,
      "name": "InvalidThreshold",
      "msg": "Invalid threshold, must be between 1 and number of members with Vote permission"
    },
    {
      "code": 6004,
      "name": "Unauthorized",
      "msg": "Attempted to perform an unauthorized action"
    },
    {
      "code": 6005,
      "name": "NotAMember",
      "msg": "Provided pubkey is not a member of multisig"
    },
    {
      "code": 6006,
      "name": "InvalidTransactionMessage",
      "msg": "TransactionMessage is malformed."
    },
    {
      "code": 6007,
      "name": "StaleProposal",
      "msg": "Proposal is stale"
    },
    {
      "code": 6008,
      "name": "InvalidProposalStatus",
      "msg": "Invalid proposal status"
    },
    {
      "code": 6009,
      "name": "InvalidTransactionIndex",
      "msg": "Invalid transaction index"
    },
    {
      "code": 6010,
      "name": "ProposalNotForMultisig",
      "msg": "Proposal does not belong to the multisig"
    },
    {
      "code": 6011,
      "name": "TransactionNotForMultisig",
      "msg": "Transaction does not belong to the multisig"
    },
    {
      "code": 6012,
      "name": "AlreadyApproved",
      "msg": "Member already approved the transaction"
    },
    {
      "code": 6013,
      "name": "AlreadyRejected",
      "msg": "Member already rejected the transaction"
    },
    {
      "code": 6014,
      "name": "AlreadyCancelled",
      "msg": "Member already cancelled the transaction"
    },
    {
      "code": 6015,
      "name": "InvalidNumberOfAccounts",
      "msg": "Wrong number of accounts provided"
    },
    {
      "code": 6016,
      "name": "InvalidAccount",
      "msg": "Invalid account provided"
    },
    {
      "code": 6017,
      "name": "ExecuteReentrancy",
      "msg": "`transaction_execute` reentrancy is forbidden"
    },
    {
      "code": 6018,
      "name": "RemoveLastMember",
      "msg": "Cannot remove last member"
    },
    {
      "code": 6019,
      "name": "NoVoters",
      "msg": "Members don't include any voters"
    },
    {
      "code": 6020,
      "name": "InvalidStaleTransactionIndex",
      "msg": "`stale_transaction_index` must be <= `transaction_index`"
    },
    {
      "code": 6021,
      "name": "NotSupportedForControlled",
      "msg": "Instruction not supported for controlled multisig"
    },
    {
      "code": 6022,
      "name": "TimeLockNotReleased",
      "msg": "Proposal time lock has not been released"
    },
    {
      "code": 6023,
      "name": "NoActions",
      "msg": "Config transaction must have at least one action"
    }
  ],
  "metadata": {
    "address": "SQDS4ep65T869zMMBKyuUq6aD6EgTu8psMjkvj52pCf",
    "origin": "anchor",
    "binaryVersion": "0.26.0",
    "libVersion": "=0.26.0"
  }
}