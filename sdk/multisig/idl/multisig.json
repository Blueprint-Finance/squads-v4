{
  "version": "0.1.0",
  "name": "multisig",
  "instructions": [
    {
      "name": "multisigCreate",
      "docs": [
        "Creates a multisig."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "creator",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The creator of the multisig."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "MultisigCreateArgs"
          }
        }
      ]
    },
    {
      "name": "multisigAddMember",
      "docs": [
        "Adds a new member to the multisig."
      ],
      "accounts": [
        {
          "name": "multisig",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "configAuthority",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "We might need it in case reallocation is needed."
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "MultisigAddMemberArgs"
          }
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "Multisig",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "configAuthority",
            "docs": [
              "The authority that can change the multisig config.",
              "This is a very important parameter as this authority can change the members and threshold.",
              "",
              "The convention is to set this to a PDA derived from the multisig address and an authority index (typically 0)",
              "using the following seeds: [\"multisig\", multisig_address, authority_index, \"authority\"].",
              "In this case, the multisig becomes autonomous, so every config change goes through",
              "the normal process of voting by the members.",
              "",
              "However, this parameter can be set to any key. This allows for the multisig to be controlled",
              "by a higher central authority or even another multisig."
            ],
            "type": "publicKey"
          },
          {
            "name": "threshold",
            "docs": [
              "Threshold for signatures."
            ],
            "type": "u16"
          },
          {
            "name": "members",
            "docs": [
              "Members of the multisig."
            ],
            "type": {
              "vec": {
                "defined": "Member"
              }
            }
          },
          {
            "name": "authorityIndex",
            "docs": [
              "Index to seed other authorities under this multisig."
            ],
            "type": "u16"
          },
          {
            "name": "transactionIndex",
            "docs": [
              "Last transaction index. 0 means no transactions have been created."
            ],
            "type": "u64"
          },
          {
            "name": "staleTransactionIndex",
            "docs": [
              "Last stale transaction index. All transactions up until this index are stale.",
              "This index is updated when multisig config (members/threshold) changes."
            ],
            "type": "u64"
          },
          {
            "name": "allowExternalExecute",
            "docs": [
              "Whether to allow non-member keys to execute txs."
            ],
            "type": "bool"
          },
          {
            "name": "createKey",
            "docs": [
              "Key that is used to seed the multisig PDA.",
              "Used solely as bytes for the seed, doesn't have any other meaning or function."
            ],
            "type": "publicKey"
          },
          {
            "name": "bump",
            "docs": [
              "Bump for the multisig PDA seed."
            ],
            "type": "u8"
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "MultisigAddMemberArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "newMember",
            "type": {
              "defined": "Member"
            }
          },
          {
            "name": "memo",
            "docs": [
              "Memo isn't used for anything, but is included in `CreatedEvent` that can later be parsed and indexed."
            ],
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "MultisigCreateArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "configAuthority",
            "docs": [
              "The authority that can configure the multisig: add/remove members, change the threshold, etc."
            ],
            "type": "publicKey"
          },
          {
            "name": "threshold",
            "docs": [
              "The number of signatures required to execute a transaction."
            ],
            "type": "u16"
          },
          {
            "name": "members",
            "docs": [
              "The members of the multisig."
            ],
            "type": {
              "vec": {
                "defined": "Member"
              }
            }
          },
          {
            "name": "createKey",
            "docs": [
              "Any key that is used to seed the multisig pda. Used solely as bytes for the seed, doesn't have any other meaning."
            ],
            "type": "publicKey"
          },
          {
            "name": "allowExternalExecute",
            "docs": [
              "Whether to allow non-member keys to execute txs."
            ],
            "type": {
              "option": "bool"
            }
          },
          {
            "name": "memo",
            "docs": [
              "Memo isn't used for anything, but is included in `CreatedEvent` that can later be parsed and indexed."
            ],
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "Member",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "key",
            "type": "publicKey"
          },
          {
            "name": "permissions",
            "type": {
              "defined": "Permissions"
            }
          }
        ]
      }
    },
    {
      "name": "Permissions",
      "docs": [
        "Bitmask for permissions."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "mask",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "ConfigUpdateType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "AddMember",
            "fields": [
              {
                "name": "reallocated",
                "type": "bool"
              }
            ]
          },
          {
            "name": "RemoveMember"
          },
          {
            "name": "ChangeThreshold"
          },
          {
            "name": "ChangeConfigAuthority"
          },
          {
            "name": "ChangeAllowExternalExecute"
          }
        ]
      }
    }
  ],
  "events": [
    {
      "name": "CreatedEvent",
      "fields": [
        {
          "name": "multisig",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "memo",
          "type": {
            "option": "string"
          },
          "index": true
        }
      ]
    },
    {
      "name": "ConfigUpdatedEvent",
      "fields": [
        {
          "name": "multisig",
          "type": "publicKey",
          "index": false
        },
        {
          "name": "update",
          "type": {
            "defined": "ConfigUpdateType"
          },
          "index": true
        },
        {
          "name": "memo",
          "type": {
            "option": "string"
          },
          "index": true
        }
      ]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "DuplicateMember",
      "msg": "Found multiple members with the same pubkey"
    },
    {
      "code": 6001,
      "name": "MemberAlreadyExists",
      "msg": "Member is already in multisig"
    },
    {
      "code": 6002,
      "name": "EmptyMembers",
      "msg": "Members array is empty"
    },
    {
      "code": 6003,
      "name": "TooManyMembers",
      "msg": "Too many members, can be up to 65535"
    },
    {
      "code": 6004,
      "name": "MaxMembersReached",
      "msg": "Maximum number of members already reached"
    },
    {
      "code": 6005,
      "name": "InvalidThreshold",
      "msg": "Invalid threshold, must be between 1 and number of members"
    },
    {
      "code": 6006,
      "name": "Unauthorized",
      "msg": "Invalid authority"
    }
  ],
  "metadata": {
    "address": "Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS",
    "origin": "anchor",
    "binaryVersion": "0.26.0",
    "libVersion": "=0.26.0"
  }
}